generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int             @id @default(autoincrement())
  email         String          @unique
  name          String?
  firstName     String?
  lastName      String?
  location      String?
  bio           String?
  avatar        String?
  taskId        Int?
  createdAt     DateTime?       @default(now())
  updatedAt     DateTime?
  Comments      Comment[]
  Tasks         Task[]
  TaskAssignees TaskAssignees[]
  KanbanBoard   KanbanBoard[]
}

enum TaskStatus {
  ARCHIVED
  BLOCKED
  COMPLETED
  CANCELLED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
}

model TaskLabels {
  id     Int    @id @default(autoincrement())
  title  String
  color  String
  Task   Task?  @relation(fields: [taskId], references: [id])
  taskId Int?
}

model Task {
  id            Int             @id @default(autoincrement())
  title         String
  description   String?
  deadline      DateTime?
  createdAt     DateTime?       @default(now())
  updatedAt     DateTime?
  assigneeId    Int?
  ownerId       Int
  status        TaskStatus      @default(COMPLETED)
  priority      TaskPriority?
  Owner         User?           @relation(fields: [ownerId], references: [id])
  TaskAssignees TaskAssignees[]
  Comments      Comment[]
  Labels        TaskLabels[]
  KanbanList    KanbanList?     @relation(fields: [kanbanListId], references: [id])
  kanbanListId  Int?
}

model TaskAssignees {
  id        Int       @id @default(autoincrement())
  taskId    Int
  task      Task      @relation(fields: [taskId], references: [id])
  userId    Int
  user      User      @relation(fields: [userId], references: [id])
  createdAt DateTime? @default(now())
  updatedAt DateTime?

  @@unique([taskId, userId])
}

model Comment {
  id        Int       @id @default(autoincrement())
  content   String
  createdAt DateTime? @default(now())
  updatedAt DateTime?
  authorId  Int
  taskId    Int
  author    User      @relation(fields: [authorId], references: [id])
  Task      Task      @relation(fields: [taskId], references: [id])
}

model KanbanBoard {
  id      Int          @id @default(autoincrement())
  title   String
  owner   User         @relation(fields: [ownerId], references: [id])
  ownerId Int
  lists   KanbanList[]
}

model KanbanList {
  id       Int         @id @default(autoincrement())
  title    String
  position Int         @default(autoincrement()) // Change this to determine the order of the lists
  board    KanbanBoard @relation(fields: [boardId], references: [id])
  boardId  Int
  tasks    Task[]
}
